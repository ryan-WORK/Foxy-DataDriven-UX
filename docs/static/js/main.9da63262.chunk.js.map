{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","setData","setState","pk","id","lastname","jobt","twitter","dataProps","react_default","a","createElement","className","dist","items","canSort","colTitle","hidden","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OA2JeA,cAvJb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAK,IAFFR,mFAMfG,KAAKM,4CAKLN,KAAKO,SAAU,CACbF,KAAK,CACD,CACAG,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEV,CACDJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEX,CACAJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEC,CACZJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEV,CACDJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEX,CACAJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEC,CACZJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEV,CACDJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEX,CACAJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,eAEX,CACAJ,GAAK,GACLC,GAAM,UACNC,SAAW,QACXC,KAAO,oBACPC,QAAW,gBAEV,CACDJ,GAAK,GACLC,GAAM,UACNC,SAAW,QACXC,KAAO,oBACPC,QAAW,gBAEX,CACAJ,GAAK,GACLC,GAAM,UACNC,SAAW,QACXC,KAAO,oBACPC,QAAW,gBAEX,CACAJ,GAAK,EACLC,GAAM,SACNC,SAAW,QACXC,KAAO,mBACPC,QAAW,mDAOrB,IAOMC,EAAYb,KAAKI,MAAMC,KAQ3B,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACLH,EAAAC,EAAAC,cAACE,EAAA,WAAD,CAAYC,MAAON,GAOrBC,EAAAC,EAAAC,cAACE,EAAA,WAAD,CAAYT,GAAI,OACJW,SAAS,EACTC,SAAU,YACVC,QAAQ,IACpBR,EAAAC,EAAAC,cAACE,EAAA,WAAD,CAAYT,GAAI,KACJY,SAAU,OACVC,QAAQ,IACpBR,EAAAC,EAAAC,cAACE,EAAA,WAAD,CAAYT,GAAI,KACJW,SAAS,EACTC,SAAU,KACVC,QAAQ,aAhJhBC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9da63262.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {FoxyTables, FoxyColumn} from \"foxy-ui\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data:[]};\n  }\n\ncomponentDidMount() {\n      this.setData();\n  }\n\n\n  setData(){\n      this.setState( {\n        data:[\n            {\n            'pk':0,\n            'id': 'Szabi0',\n            'lastname':'title',\n            'jobt':'0 body inspector',\n            'twitter': '@something0'\n            },\n             {\n            'pk':3,\n            'id': 'Szabi2',\n            'lastname':'title',\n            'jobt':'3 body inspector',\n            'twitter': '@something3'\n            },\n            {\n            'pk':2,\n            'id': 'Szabi2',\n            'lastname':'title',\n            'jobt':'2 body inspector',\n            'twitter': '@something2'\n            },\n                        {\n            'pk':4,\n            'id': 'Szabi4',\n            'lastname':'title',\n            'jobt':'4 body inspector',\n            'twitter': '@something4'\n            },\n             {\n            'pk':5,\n            'id': 'Szabi5',\n            'lastname':'title',\n            'jobt':'5 body inspector',\n            'twitter': '@something5'\n            },\n            {\n            'pk':7,\n            'id': 'Szabi7',\n            'lastname':'title',\n            'jobt':'7 body inspector',\n            'twitter': '@something7'\n            },\n                        {\n            'pk':6,\n            'id': 'Szabi6',\n            'lastname':'title',\n            'jobt':'6 body inspector',\n            'twitter': '@something6'\n            },\n             {\n            'pk':9,\n            'id': 'Szabi9',\n            'lastname':'title',\n            'jobt':'9 body inspector',\n            'twitter': '@something9'\n            },\n            {\n            'pk':8,\n            'id': 'Szabi8',\n            'lastname':'title',\n            'jobt':'8 body inspector',\n            'twitter': '@something8'\n            },\n            {\n            'pk':10,\n            'id': 'Szabi10',\n            'lastname':'title',\n            'jobt':'10 body inspector',\n            'twitter': '@something10'\n            },\n             {\n            'pk':11,\n            'id': 'Szabi11',\n            'lastname':'title',\n            'jobt':'11 body inspector',\n            'twitter': '@something11'\n            },\n            {\n            'pk':12,\n            'id': 'Szabi12',\n            'lastname':'title',\n            'jobt':'12 body inspector',\n            'twitter': '@something12'\n            },\n            {\n            'pk':1,\n            'id': 'Szabi1',\n            'lastname':'title',\n            'jobt':'1 body inspector',\n            'twitter': '@something1'\n            },\n        ]\n    })\n  }\n\n  render() {\n  let styles =\n      {\n       background:`red`,\n       borderWidth: `7px`,\n       color: `black`,\n       borderBottom: `4px solid #ddd`\n      };\n  const dataProps = this.state.data;\n  let sb = {\n      borderBottom: `9px solid black`\n  };\n  let rs = {\n      borderTop: `1px solid black`,\n      borderBottom: `1px solid black`\n  };\n    return (\n      <div className=\"table\">\n                <FoxyTables items={dataProps}\n                    // tableCustomPaginate={true}\n                    // makePaginate={true}\n                           // bottomTableStyle={sb}\n                           // rowStyle={rs}\n                           // headerStyle={styles}\n                   >\n              <FoxyColumn id={'jobt'}\n                          canSort={true}\n                          colTitle={'Job Title'}\n                          hidden={false}/>\n              <FoxyColumn id={'id'}\n                          colTitle={'Name'}\n                          hidden={false}/>\n              <FoxyColumn id={'pk'}\n                          canSort={true}\n                          colTitle={'PK'}\n                          hidden={false}/>\n</FoxyTables>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}